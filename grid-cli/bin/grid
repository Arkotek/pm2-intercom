#!/usr/bin/env node

const program      = require('commander');
const fs           = require('fs');
const path         = require('path');
const package      = require('../package.json');
const sshexec      = require('ssh-exec');
const chalk        = require('chalk');
const cliSpinners  = require('cli-spinners');
const async        = require('async');
const grid         = require('grid-api');
const cliux        = require('./cli-ux.js');
const multissh     = require('multissh');
const ora          = require('ora');
const shelljs      = require('shelljs');
const Common       = require('../lib/common.js');

program
  .version(package.version);

/**
 * Customs
 */
program
  .option('--watch')
  .command('list')
  .alias('ls')
  .description('List all peers connected to network')
  .action(function() {
    if (program.watch === true)
      cliux.displayHostsWatch();
    else
      Common.displayHosts();
  });

program
  .command('status')
  .description('Status data about the current grid')
  .action(function() {
  });

program
  .command('invoke')
  .description('List all peers connected to network')
  .action(function() {
  });

program
  .command('setup-key <hostfile>')
  .alias('setup-keys')
  .option('--key <public ssh key>')
  .description('Setup key (default to $HOME/.ssh/id_rsa.pub)')
  .action(function(hostfile, opts) {

    var path = require('path');

    try {
      var content = fs.readFileSync(path.join(process.cwd(), hostfile)).toString()
    } catch(e) {
      if (e) return exitError(e);
    }
    var hosts = content.trim().split('\n');

    var ssh_copy_id = path.join(__dirname, '..', 'ssh-copy-id');

    async.forEachLimit(hosts, 1, (host, next) => {
      console.log(chalk.blue.bold('===> Copying key to : %s'), host);

      var cmd = ssh_copy_id;

      if (opts.key) {
        cmd += ' -i ' + opts.key;
      }

      cmd += ' ' + hosts[0];

      shelljs.exec(cmd, function(code, stdout, stderr) {
        next();
      });
    }, e => {
      process.exit(0);
    });
  });

program
  .command('recover <hostfile> <gridname>')
  .description('Force all nodes (via SSH) to recover')
  .action(function(hostfile, gridname) {
    var hosts = fs.readFileSync(hostfile).toString().trim().split('\n');

    async.forEachLimit(hosts, 1, function(host, next) {
      var cmd = "PS1='$ ' source ~/.bashrc; GRID=" + gridname + " pm2 restart gridcontrol";
      var user = host.split(':')[0] + '@' + host.split(':')[1];


      try {
        var stream = sshexec(cmd, user);
      } catch(e) {
      }

      stream.on('error', function(e) {
        console.log('Got error', e.message || e);
        next();
      });

      stream.on('data', function(dt) {
        process.stdout.write(dt.toString());
      });

      stream.on('warn', function(dt) {
        process.stdout.write(dt.toString());
      });


      stream.on('finish', function() {
        next();
      });

    }, function(err) {
      console.log('end');
      shelljs.exec('GRID=' + gridname + ' pm2 restart gridcontrol', function() {
        console.log('done');
      });

    });
  });

program
  .command('dump <filename>')
  .description('Save all hosts connected to a hostfile')
  .action(function(filename) {
    listServerForMulti(function(err, node_list) {
      if (err) return exitError(err);
      try {
        fs.unlinkSync(filename);
      } catch(e) {}
      node_list.forEach(function(node) {
        fs.appendFileSync(filename, node.user + ':' + node.ip + '\n');
      });
      console.log(chalk.bold.blue(filename + ' hostfile content:'));
      shelljs.exec('cat ' + filename);
      console.log('');
      console.log(chalk.bold('To setup new SSH key:'))
      console.log(chalk.grey('$ grid setup-key ' + filename + ' --key <key_file>'));
      console.log(chalk.bold('To recover the grid:'))
      console.log(chalk.grey('$ grid recover ' + filename));
      process.exit(0);
    });
  });

program
  .command('reset')
  .alias('clear')
  .description('Clear all')
  .action(function() {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      execCmd('pm2 delete all ; pm2 restart gridcontrol', server_list);
    });
  });

program
  .command('unprovision')
  .description('Uninstall grid control on all nodes')
  .action(function() {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      return execCmd('pm2 uninstall gridcontrol', server_list);
    });
  });

program
  .command('init [grid_name]')
  .alias('install')
  .description('Install a local Gridcontrol Node')
  .action(function(grid_name) {
    require('../workflows/init.js')(grid_name);
  });

program
  .command('move <new_grid_name>')
  .description('move all server to another grid namespace')
  .action(function(new_grid_name) {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      return execCmd('GRID="' + new_grid_name + '" pm2 restart gridcontrol', server_list);
    });
  });

program
  .command('provision <username> <ip> <grid_name>')
  .description('provision a remote node')
  .action(function(username, ip, namespace) {
    var exec = require('child_process').exec;
    var strssh = username + '@' + ip;

    var child = exec('scp ' + __dirname + '/../install.sh ' + strssh + ':/tmp');

    child.stdout.on('data', function(data) {
      console.log('stdout: ' + data);
    });

    child.stderr.on('data', function(data) {
      console.log('stderr: ' + data);
    });

    child.on('close', function(code) {
      console.log('Install script copied with code %d', code);

      var stream = sshexec("PS1='$ ' source ~/.bashrc; cat /tmp/install.sh | GRID=" + namespace + " bash", strssh);

      stream.on('data', function(dt) {
        process.stdout.write(dt.toString());
      });

      stream.on('error', function(e) {
        console.log('Got error', e.message || e);
      });

      stream.on('exit', function() {
        exitSuccess();
      });

    });
  });

program
  .command('list-tasks')
  .alias('tasks')
  .description('List all tasks')
  .action(function() {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      execCmd('pm2 ls', server_list);
    });
  });

program
  .command('upgrade [version]')
  .description('Upgrade whole grid to latest gridcontrol version')
  .action(function() {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      execCmd('pm2 install gridcontrol', server_list);
    });
  });

program
  .command('spread <bash_command>')
  .description('Execute a bash command on each Grid nodes')
  .action(function(bash_command) {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      execCmd(bash_command, server_list);
    });
  });

program
  .command('logs [task_name]')
  .description('Display logs of all nodes')
  .action(function(task_name) {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      var cmd = 'pm2 logs' + (task_name ? ' ' + task_name : '');
      execCmd(cmd, server_list);
    });
  });

program
  .command('monitor <secret_key> <public_key>')
  .description('Monitor all nodes and tasks with Keymetrics (https://keymetrics.io)')
  .action(function(secret, public) {
    listServerForMulti(function(err, server_list) {
      if (err) return exitError(err);
      var cmd = 'pm2 link ' + secret + ' ' + public;
      execCmd(cmd, server_list);
    });
  });

program
  .command('restart')
  .description('Restart local Gridcontrol app')
  .action(function() {
    var shelljs = require('shelljs');

    shelljs.exec('pm2 restart gridcontrol', { silent : true }, function(code, stderr, stdout) {

      if (code != 0) {
        console.error(stderr);
        return exitError();
      }

      Common.displayHosts(function() {
        exitSuccess()
      });
    });
  });

function execCmd(cmd, server_list) {
  multissh.start(cmd, server_list, function() {
    Common.displayHosts(function() {
      exitSuccess()
    });
  });
};

function listServerForMulti(cb) {
  grid.listHosts(function(err, hosts) {
    if (err) return cb(err);
    var server_list = [];

    hosts.forEach(function(host) {
      server_list.push({
        ip : host.public_ip,
        user : host.user,
        local : host.local
      });
    });

    return cb(null, server_list);
  });
}

/**
 * Generics
 */
program
  .command('*')
  .action(function(env){
    console.log('Enter a Valid command');
    program.outputHelp();
    process.exit(0);
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

function exitError(err) {
  console.error(err);
  process.exit(1);
}

function exitSuccess(msg) {
  console.log(chalk.bold.green(msg || 'Action successfully executed'));
  process.exit(0);
}
